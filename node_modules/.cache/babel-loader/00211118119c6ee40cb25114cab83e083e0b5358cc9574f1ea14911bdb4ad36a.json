{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LuisChavezDelgadoDDR\\\\Desktop\\\\Nueva carpeta\\\\dashboard\\\\src\\\\context\\\\authContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext } from \"react\";\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const authContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(authContext);\n  // if (!context) throw new Error ('There is not auth provider')\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  //const user = {\n  //    login:true\n  //}\n  const signup = (email, password) => createUserWithEmailAndPassword(auth, email, password);\n  //console.log(email, password);\n\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: {\n      signup\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","createUserWithEmailAndPassword","auth","authContext","useAuth","context","AuthProvider","children","signup","email","password"],"sources":["C:/Users/LuisChavezDelgadoDDR/Desktop/Nueva carpeta/dashboard/src/context/authContext.js"],"sourcesContent":["import { createContext, useContext } from \"react\";\r\nimport {createUserWithEmailAndPassword} from 'firebase/auth';\r\nimport {auth} from '../firebase'\r\n\r\nexport const authContext = createContext();\r\n\r\nexport const useAuth = () =>{\r\n    const context = useContext(authContext)\r\n   // if (!context) throw new Error ('There is not auth provider')\r\n    return context\r\n}\r\n\r\nexport function AuthProvider({children}){\r\n    //const user = {\r\n    //    login:true\r\n    //}\r\n    const signup = (email, password) => createUserWithEmailAndPassword(auth,email,password)\r\n        //console.log(email, password);\r\n\r\n    return(\r\n        <authContext.Provider value={{signup}}>\r\n            {children}\r\n        </authContext.Provider>\r\n    );\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAAQC,8BAA8B,QAAO,eAAe;AAC5D,SAAQC,IAAI,QAAO,aAAa;AAAA;AAEhC,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAE;AAE1C,OAAO,MAAMK,OAAO,GAAG,MAAK;EAAA;EACxB,MAAMC,OAAO,GAAGL,UAAU,CAACG,WAAW,CAAC;EACxC;EACC,OAAOE,OAAO;AAClB,CAAC;AAAA,GAJYD,OAAO;AAMpB,OAAO,SAASE,YAAY,OAAY;EAAA,IAAX;IAACC;EAAQ,CAAC;EACnC;EACA;EACA;EACA,MAAMC,MAAM,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAKT,8BAA8B,CAACC,IAAI,EAACO,KAAK,EAACC,QAAQ,CAAC;EACnF;;EAEJ,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACF;IAAM,CAAE;IAAA,UACjCD;EAAQ;IAAA;IAAA;IAAA;EAAA,QACU;AAE/B;AAAC,KAZeD,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}